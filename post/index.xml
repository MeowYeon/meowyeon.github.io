<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on yeon.guo&#39;s site</title>
    <link>https://meowyeon.github.io/post/</link>
    <description>Recent content in Posts on yeon.guo&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2008–2019, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 05 Jun 2020 21:46:10 +0800</lastBuildDate>
    
	<atom:link href="https://meowyeon.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Viper 初识</title>
      <link>https://meowyeon.github.io/post/viper/</link>
      <pubDate>Fri, 05 Jun 2020 21:46:10 +0800</pubDate>
      
      <guid>https://meowyeon.github.io/post/viper/</guid>
      <description>Viper初识 Viper是Golang配置解决方案，可以Cobra(Golang命令行解决方案)配合使用。 直观感觉Viper里面是一个map[string]interface{}结构存储左右的配置项，使用mapstructure将map转struct。
Set/Get Viper支持Set直接设置配置项，同时支持配置项别名
viper.Set() viper.RegisterAlias() Viper支持不同类型的Get，以方便配置读取
Get(key string) : interface{} GetBool(key string) : bool GetFloat64(key string) : float64 GetInt(key string) : int GetIntSlice(key string) : []int GetString(key string) : string GetStringMap(key string) : map[string]interface{} GetStringMapString(key string) : map[string]string GetStringSlice(key string) : []string GetTime(key string) : time.Time GetDuration(key string) : time.Duration IsSet(key string) : bool AllSettings() : map[string]interface{} 命令行参数 通过cobra/pflag包，viper配置可以绑定命令行参数使用
BindPFlag(key string, flag *pflag.Flag) error BindPFlags(flags *pflag.FlagSet) error 环境变量 Viper支持获取配置项时直接读取ENV变量，不详述，请参考链接</description>
    </item>
    
    <item>
      <title>Go Mod初识</title>
      <link>https://meowyeon.github.io/post/go-mod/</link>
      <pubDate>Wed, 03 Jun 2020 21:49:09 +0800</pubDate>
      
      <guid>https://meowyeon.github.io/post/go-mod/</guid>
      <description>go mod 初识 go mod为go官方推出的包管理工具，这里简单整理其使用
包管理工具 go mod之前依赖GOPATH, GOROOT, vendor进行编译 go mod之后可以跳出GOPATH依赖
以往包管理工具多依赖vendor进行设计，go mod依赖包版本信息，默认使用最新的tag版本，如果没有tag版本则使用最新commit生成版本信息
使用go mod 需要打开GO111MODULE: on, off, auto(当前目录不在GOPATH中并且有go.mod文件，才会使用go mod) go mod拉取的包默认保存在GOPATH/pkg/mod目录下
使用go mod init生成go.mod文件 使用go build编译当前工程，会在go.mod文件中生成依赖信息
go mod可以生成版本相关的依赖信息，这样当其他人fetch你的工程编译时，可以保证使用相同的依赖进行编译，防止出现兼容问题 go mod默认使用当前目录的go.mod，如果没有发现，则依次向父目录寻找
实践 当需要指定版本时，可以使用go mod -require=module@version指定版本，执行后会更新go.mod文件中依赖信息
由于MVS存在，当工程需要同时依赖两个major版本module时，可以使用类似module/v2的模块名称，go build时会自动拉取指定major版本最新版本进行编译，同时不会破坏历史依赖信息
可以使用go mod -vendor生成vendor以兼容历史
参考链接 初窥Go module</description>
    </item>
    
  </channel>
</rss>